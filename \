
# ------------------------------
# Package developement
#
# add support.R to .gitignore
#
# add support.R to .Rbuildignore
#

library(devtools)
library(rmarkdown)
library(available)
library(sinew)
library(rhub)
library(pipeR)
library(xml2)
library(purrr)
library(dplyr)
library(janitor)
# pesquisar por nome
available('getLattes')

# posso inicializar a criação de um pacote dentro de uma pasta que estou trabalhando
create_package(".")
create_package("~/OneDrive/Rworkspace/getLattes")

# Basic: load functions, make skeleton, make documentation, buil the package, and install it
load_all()
makeOxyFile()
document()
check()
install()

# DESCRIPTION
# + editar o arquivo de descrição do pacote
# + criar um arquivo NEWS.md
use_package("XML", type = "Imports")
use_package("utils", type = "Imports")
use_package("dplyr", type = "Imports")
use_package("tibble", type = "Imports")
use_package("rlang", type = "Imports")
use_package("pipeR", type = "Imports")
use_package("rlist", type = "Imports")
use_package("stringr", type = "Imports")
use_package("stringi", type = "Depends")

# LICENSE
use_gpl3_license()
use_mit_license()

# USE DATA
use_data_raw()
use_data(xmlsLattes, compress = 'gzip', overwrite = TRUE)
save(xmlsLattes, file = 'data/xmlsLattes.rda', compress = 'xz')

# BUILT
document()
check()
install()

# README
use_readme_rmd()
build_readme()
clean_vignettes()

# VIGNETTES
use_vignette("introduction_getLattes")
build_vignettes()
clean_vignettes()

# SITE
build_readme()
build_vignettes()
build_site()
build_site(preview = FALSE)

# CRAN
validate_email(email = 'roneyfraga@gmail.com', token = '0cd6de7af2ce4d68aa23b595c752c0e3')
use_news_md()
use_cran_comments()
spell_check()
check_rhub()
check_win_devel()
# git: add, commit, and pull changes
release()

# ------------------------------
# TODO
#
# - linearizeNestedList
# - roneyfraga/caiporar


# ------------------------------
# Currículos 

list.files(path = '~/OneDrive/Rworkspace/2021 Smart Cities/CNPQ/xmls_shortIds', pattern = '*.zip', full.names = T) %>>% 
    (. -> zips)

zips[1:50] %>>%
    purrr::map(safely(read_xml)) %>>% 
    purrr::map(pluck, 'result') %>>%
    (. -> xmls)

curriculo <- xmls[[1]]



# ------------------------------
# ERROR 

if (!any(class(curriculo) == 'xml_document')) {
    stop("The input file must be XML, imported from `xml2` package.", call. = FALSE)
}

# ------------------------------
# testes 

xmls %>>%
    map(safely(getId)) %>>%
    map(pluck, 'result') %>>%
    unlist()

xmls %>>%
    map(safely(getDadosGerais)) %>>%
    map(pluck, 'result') %>>%
    dplyr::bind_rows() %>>%
    tibble::as_tibble() 

xmls %>>%
    map(safely(getArtigosPublicados)) %>>%
    map(pluck, 'result') %>>%
    dplyr::bind_rows() %>>%
    tibble::as_tibble() 

xmls %>>%
    map(safely(getAreasAtuacao)) %>>%
    map(pluck, 'result') %>>%
    dplyr::bind_rows() %>>%
    tibble::as_tibble() 

xmls %>>%
    map(safely(getAtuacoesProfissionais)) %>>%
    map(pluck, 'result') %>>%
    dplyr::bind_rows() %>>%
    tibble::as_tibble() 

xmls %>>%
    map(safely(getEnderecoProfissional)) %>>%
    map(pluck, 'result') %>>%
    dplyr::bind_rows() %>>%
    tibble::as_tibble() 

xmls %>>%
    map(safely(getLinhaPesquisa)) %>>%
    map(pluck, 'result') %>>%
    dplyr::bind_rows() %>>%
    tibble::as_tibble() 

xmls %>>%
    map(safely(getIdiomas)) %>>%
    map(pluck, 'result') %>>%
    dplyr::bind_rows() %>>%
    tibble::as_tibble() 

